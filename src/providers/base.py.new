"""
Base provider class for API providers.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, AsyncGenerator, Union, ClassVar
import httpx
import json
import asyncio
from src.utils.logging import logger
from src.core.errors.exceptions import (
    ProviderError,
    AuthenticationError,
    RateLimitError,
    ServiceUnavailableError
)
from src.core.errors.handler import ErrorHandler


class BaseProvider(ABC):
    """Base class for API providers."""
    
    # Class-level configuration
    DEFAULT_TIMEOUT: ClassVar[int] = 600
    DEFAULT_AUTH_HEADER: ClassVar[str] = "Authorization"
    DEFAULT_AUTH_FORMAT: ClassVar[str] = "Bearer {api_key}"
    
    def __init__(
        self,
        api_key: str,
        api_base: Optional[str] = None,
        auth_header: Optional[str] = None,
        auth_format: Optional[str] = None,
        timeout: Optional[int] = None
    ):
        """
        Initialize the provider.
        
        Args:
            api_key: API key
            api_base: API base URL (optional)
            auth_header: Authentication header name (optional)
            auth_format: Authentication format (optional)
            timeout: Request timeout in seconds (optional)
        """
        self.name = self.__class__.__name__.replace('Provider', '').lower()
        self.api_key = api_key
        self.api_base = api_base
        self.auth_header = auth_header or self.get_auth_header_name()
        self.auth_format = auth_format or self.DEFAULT_AUTH_FORMAT
        self.timeout = timeout or self.DEFAULT_TIMEOUT
    
    @abstractmethod
    def get_default_endpoint(self) -> str:
        """
        Get the default API endpoint.
        
        Returns:
            Default API endpoint URL
        """
        pass
    
    @abstractmethod
    def get_auth_header_name(self) -> str:
        """
        Get the authentication header name.
        
        Returns:
            Authentication header name
        """
        pass
    
    @abstractmethod
    def format_auth_value(self, api_key: str) -> str:
        """
        Format the authentication value.
        
        Args:
            api_key: API key
            
        Returns:
            Formatted authentication value
        """
        pass
    
    @abstractmethod
    def get_endpoint_path(self) -> str:
        """
        Get the API endpoint path.
        
        Returns:
            API endpoint path
        """
        pass
    
    @abstractmethod
    async def chat_completion(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Make a chat completion API call.
        
        Args:
            request_data: Request data
            
        Returns:
            API response
        """
        pass
    
    @abstractmethod
    async def stream_chat_completion(self, request_data: Dict[str, Any]) -> AsyncGenerator[Dict[str, Any], None]:
        """
        Make a streaming chat completion API call.
        
        Args:
            request_data: Request data
            
        Returns:
            Generator yielding API response chunks
        """
        pass
    
    def build_url(self, api_base: Optional[str] = None) -> str:
        """
        Build the complete API URL.
        
        Args:
            api_base: API base URL (optional)
            
        Returns:
            Complete API URL
        """
        base = api_base or self.api_base or self.get_default_endpoint()
        return f"{base.rstrip('/')}/{self.get_endpoint_path().lstrip('/')}"
    
    def build_headers(self, custom_headers: Optional[Dict[str, str]] = None) -> Dict[str, str]:
        """
        Build the request headers.
        
        Args:
            custom_headers: Custom headers to include (optional)
            
        Returns:
            Request headers
        """
        # Support both {api_key} and {key} formats
        try:
            auth_value = self.auth_format.format(api_key=self.api_key)
        except KeyError:
            # If {api_key} doesn't exist, try {key}
            try:
                auth_value = self.auth_format.format(key=self.api_key)
            except KeyError:
                # If neither exists, use the format_auth_value method
                auth_value = self.format_auth_value(self.api_key)
        
        headers = {
            "Content-Type": "application/json",
            self.auth_header: auth_value
        }
        
        if custom_headers:
            headers.update(custom_headers)
        
        return headers
    
    async def make_request(
        self,
        body: Dict[str, Any],
        custom_headers: Optional[Dict[str, str]] = None,
        stream: bool = False,
        timeout: Optional[int] = None
    ) -> Union[Dict[str, Any], AsyncGenerator[Dict[str, Any], None]]:
        """
        Make an API request.
        
        Args:
            body: Request body
            custom_headers: Custom headers (optional)
            stream: Whether to stream the response (optional)
            timeout: Request timeout in seconds (optional)
            
        Returns:
            API response or generator yielding response chunks
            
        Raises:
            ProviderError: If the request fails
        """
        url = self.build_url()
        headers = self.build_headers(custom_headers)
        timeout_value = timeout or self.timeout
        
        try:
            if stream:
                return self._handle_stream_response(url, headers, body, timeout_value)
            else:
                async with httpx.AsyncClient(timeout=timeout_value) as client:
                    return await self._handle_normal_response(client, url, headers, body)
        except httpx.TimeoutException as e:
            logger.error(f"Request timeout: {url}")
            raise ServiceUnavailableError(
                message=f"Request to {self.name} timed out after {timeout_value} seconds",
                provider=self.name,
                details={"url": url, "timeout": timeout_value}
            )
        except httpx.HTTPStatusError as e:
            # Use the error handler to convert HTTP errors to appropriate exceptions
            raise ErrorHandler.handle_provider_error(
                error=e,
                provider=self.name,
                context={"url": url, "status_code": e.response.status_code}
            )
        except Exception as e:
            logger.error(f"Request failed: {e}")
            raise ProviderError(
                message=f"Request to {self.name} failed: {str(e)}",
                provider=self.name,
                details={"url": url, "error": str(e)}
            )
    
    async def _handle_normal_response(
        self,
        client: httpx.AsyncClient,
        url: str,
        headers: Dict[str, str],
        body: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Handle a normal (non-streaming) response.
        
        Args:
            client: HTTP client
            url: Request URL
            headers: Request headers
            body: Request body
            
        Returns:
            API response
            
        Raises:
            ProviderError: If the request fails
        """
        try:
            resp = await client.post(url, headers=headers, json=body)
            resp.raise_for_status()
            return resp.json()
        except httpx.HTTPStatusError as e:
            error_text = e.response.text
            logger.error(f"API call failed: {e.response.status_code} - {error_text}")
            
            # Use the error handler to convert HTTP errors to appropriate exceptions
            raise ErrorHandler.handle_provider_error(
                error=e,
                provider=self.name,
                context={"url": url, "status_code": e.response.status_code, "response": error_text}
            )
    
    async def _handle_stream_response(
        self,
        url: str,
        headers: Dict[str, str],
        body: Dict[str, Any],
        timeout: int
    ) -> AsyncGenerator[Dict[str, Any], None]:
        """
        Handle a streaming response.
        
        Args:
            url: Request URL
            headers: Request headers
            body: Request body
            timeout: Request timeout in seconds
            
        Returns:
            Generator yielding response chunks
            
        Raises:
            ProviderError: If the request fails
        """
        client = None
        try:
            client = httpx.AsyncClient(timeout=timeout)
            async with client.stream('POST', url, headers=headers, json=body) as resp:
                resp.raise_for_status()
                async for line in resp.aiter_lines():
                    if line.strip():
                        if line.startswith('data: '):
                            data = line[6:].strip()
                            if data == '[DONE]':
                                break
                            try:
                                yield json.loads(data)
                            except json.JSONDecodeError:
                                continue
        except httpx.HTTPStatusError as e:
            error_text = e.response.text if hasattr(e, 'response') else str(e)
            logger.error(f"Streaming API call failed: {e.response.status_code if hasattr(e, 'response') else 'Unknown'} - {error_text}")
            
            # Use the error handler to convert HTTP errors to appropriate exceptions
            raise ErrorHandler.handle_provider_error(
                error=e,
                provider=self.name,
                context={"url": url, "status_code": getattr(e.response, 'status_code', None), "response": error_text}
            )
        except Exception as e:
            logger.error(f"Streaming response handling failed: {e}")
            raise ProviderError(
                message=f"Streaming response from {self.name} failed: {str(e)}",
                provider=self.name,
                details={"url": url, "error": str(e)}
            )
        finally:
            if client:
                await client.aclose()